package org.example.logs_.controller;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class LogsController {

  // Logger object ‡∂ë‡∂ö initialize ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è ‚Äì ‡∂∏‡∑ö‡∂ö‡∑ô‡∂±‡∑ä logs generate ‡∂ö‡∂ª‡∂±‡∑ä‡∂± ‡∂¥‡∑î‡∑Ö‡∑î‡∑Ä‡∂±‡∑ä
  private static final Logger logger = LoggerFactory.getLogger(LogsController.class);

  // "/log" ‡∂ö‡∑í‡∂∫‡∂± endpoint ‡∂ë‡∂ö call ‡∂ö‡∑Ö‡∑è‡∂∏ ‡∂∏‡∑ô‡∂∫ ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∑Ä‡∑ô‡∂±‡∑Ä‡∑è
  @GetMapping("/log")
  public String logMessage() {

    // Logging levels ‡∂∫‡∑ú‡∂Ø‡∑è‡∂ú‡∑ô‡∂± message log ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
    logger.info("logMessage is called info");   // ‡∑É‡∑è‡∂∏‡∑è‡∂±‡∑ä‚Äç‡∂∫ ‡∂≠‡∑ú‡∂ª‡∂≠‡∑î‡∂ª‡∑î
    logger.warn("logMessage is called warn");   // ‡∂Ö‡∑Ä‡∑Ä‡∑è‡∂Ø (warnings)
    logger.error("logMessage is called error"); // ‡∂Ø‡∑ù‡∑Ç (errors)
    logger.debug("logMessage is called debug"); // development ‡∂ë‡∂ö‡∂ß ‡∂ã‡∂¥‡∂∫‡∑ù‡∂ú‡∑ì debug info

    // üîç Logging ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª‡∂± ‡∂¥‡∑ä‚Äç‡∂ª‡∂∞‡∑è‡∂± ‡∂Ö‡∂ª‡∂∏‡∑î‡∂´‡∑î:
    // - Log management tools: ELK stack, Logstash, Kibana
    // - Error tracking
    // - System monitoring
    // - Security checking

    // Exception handling ‡∂ë‡∂ö‡∂ö‡∑ä (runtime error simulate ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è)
    try {
      String notNumberStr = "hello"; // ‡∂∏‡∑ö‡∂ö integer ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂±‡∑ô‡∂∏‡∑ô‡∂∫‡∑í
      int notNumber = Integer.parseInt(notNumberStr); // Error ‡∂ë‡∂ö throw ‡∑Ä‡∑ô‡∂±‡∑Ä‡∑è
    } catch (NumberFormatException e) {
      // Exception ‡∂ë‡∂ö log ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è error level ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä
      logger.error("logMessage is called error: {}", e.getMessage());
    }

    return "this is sample end point for test log manager";
  }
}
